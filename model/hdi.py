# -*- coding: utf-8 -*-
"""Predict HDI per Province in Indonesiaipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15v8DC9BQu0BTQVUrzSV8Pa0Vp84UT7Yj

<h1 style='color:purple' align='center'>Data Science Regression Project: Predicting Human Development Index per Province in Indonesia</h1>

## What is Human Develeoment Index?

>Human Development Index (HDI) is the measurement that explanins of how a resident in one region can access development results in obtaining income, health, education and so on. First, HDI was introduce by UNDP in 1990 and published regularly on the annual report
of Human Development Report (HDR). HDI is formed by three basic variables : **A long and healthy life**, **knowledge** and **decent standard of living**.

### The benefits of HDI?

1. HDI is a key indicator to measure the succesful in efforts to 
build the quality of life of human (society/population).
2. HDI can determine the ranking of development in a region or country.
3. For Indonesia, HDI is a strategic data because apart from a measure of
Government performance, HDI is also used as one of thr allocators for determining
the General Allocation Fund (Dana Alokasi Umum - DAU) of each Province.

### The new method is using indicators that are more precise and can differentiate well.

1. By inserting the average length of schooling and the expected rate years
of schooling, a relevant condition can be obtained in education and its changing.

2. GNP replaces GDP because it represents income more generaly in one 
community of an area.
"""

from google.colab import drive
drive.mount('/content/drive/')

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

"""Fungsi helper"""

def renaming(dataset):
  dataset.rename(columns={'Unnamed: 0':'Provinsi',
                          'Unnamed: 1':'2021',
                          'Unnamed: 2':'2020',
                          'Unnamed: 3':'2019',
                          'Unnamed: 4':'2018',
                          'Unnamed: 5':'2017',
                          'Unnamed: 6':'2016',
                          'Unnamed: 7':'2015',
                          'Unnamed: 8':'2014',
                          'Unnamed: 9':'2013',
                          'Unnamed: 10':'2012',
                          'Unnamed: 11':'2011',
                          'Unnamed: 12':'2010'}, inplace=True)
  dataset.drop(dataset.index[[0,1]],inplace=True)

def stack(dataset):
  bersih = dataset.drop('Provinsi',axis=1).unstack().reset_index(drop=True).to_list()
  return bersih

# Comparison function for each province over year (comparison by one variable)
plt.rcParams['figure.figsize'] = (20, 8)

def plot_perbandingan(prov1,prov2,var):
  y1 = newdf[(newdf['Provinsi'] == prov1)][var]
  y2 = newdf[(newdf['Provinsi'] == prov2)][var]
  x = newdf['Tahun'].unique()

  plt.plot(x, y1, label = prov1, marker = 'o')
  plt.plot(x, y2, label = prov2, marker = 'o')
  plt.xlabel('Tahun',fontsize = 14)
  plt.ylabel(var, fontsize = 14)
  plt.title(f'Perbandingan {var} Provinsi {prov1} dan Provinsi {prov2}', fontsize = 18)
  plt.legend()
  plt.grid()
  plt.show()

def avg(var):
  rerata = []
  for i in newdf.Provinsi.unique():
    rata = newdf[(newdf['Provinsi'] == i)][var].mean()
    rerata.append(rata)
  return rerata

def plot_bar(var):
  avg_dataset = pd.DataFrame({'Provinsi' : newdf.Provinsi.unique(),
                            'Rata rata' : avg(var)}).sort_values(by = 'Rata rata', ascending = False).head(10)
  plt.bar(avg_dataset.Provinsi, avg_dataset['Rata rata'])
  plt.title(f'10 Provinsi dengan nilai rata rata {var} tertinggi', fontsize = 18)
  plt.xlabel('Provinsi', fontsize = 14)
  plt.ylabel(f'Nilai rata rata {var}', fontsize = 14)
  plt.show()

def scatter_plot(ft1,ft2):
  scatter = sns.scatterplot(newdf[ft1],newdf[ft2], hue = newdf.Provinsi, s=100)
  scatter.legend(loc = 'center left', bbox_to_anchor = (1,0.5), ncol = 1)
  scatter.axes.set_title(f'Perbandingan berbagai Provinsi berdasarkan {ft1} dan {ft2}',fontsize=15)
  scatter.set_xlabel(f'{ft1}',fontsize=15)
  scatter.set_ylabel(f'{ft2}',fontsize=15)

# Columns
# 'Provinsi', 'IPM', 'Harapan Hidup (Tahun)',
# 'Pengeluaran Per Kapita Per Tahun (Ribu Rupiah)',
# 'Rata-Rata Lama Sekolah (Tahun)'
# 'Tahun'

ipm = pd.read_excel('/content/drive/MyDrive/Nilai IPM.xlsx')
renaming(ipm)
ipm1 = stack(ipm)

ratarata_ls = pd.read_excel('/content/drive/MyDrive/Nilai Rata Rata Lama Bersekolah.xlsx')
renaming(ratarata_ls)
rls = stack(ratarata_ls)

ratarata_hls = pd.read_excel('/content/drive/MyDrive/Nilai Harapan Lama Bersekolah.xlsx')
renaming(ratarata_hls)
hls = stack(ratarata_hls)

pengeluaran_perkapita = pd.read_excel('/content/drive/MyDrive/Nilai Pengeluaran Per Kapita.xlsx')
renaming(pengeluaran_perkapita)
ppk = stack(pengeluaran_perkapita)

angka_harapanhidup = pd.read_excel('/content/drive/MyDrive/Nilai Angka Harapan Hidup.xlsx')
renaming(angka_harapanhidup)
hd = stack(angka_harapanhidup)

prov = ipm.Provinsi.to_list()*12
tahun = [i for i in range(2021, 2009,-1) for j in range(34)]

newdf = pd.DataFrame({'provinsi':prov,
              'ipm':ipm1,
              'harapan_hidup':hd,
              'ppk':ppk,
              'ls_mean':rls,
              'hls':hls,
              'tahun':tahun
              })
# Replace '-' by 0 and change dtype of Tahun column
newdf[newdf.columns[1:7]] = newdf[newdf.columns[1:7]].replace('-',0).astype(float)

"""Create Kategori IPM"""

conditions = [
 (newdf['ipm'] < 60),
 (newdf['ipm'] <= 70) & (newdf['ipm'] >= 60),
 (newdf['ipm'] <= 80) & (newdf['ipm'] >=70),
 (newdf['ipm'] >= 80)
]
ket = ['Rendah','Sedang','Tinggi','Sangat Tinggi']

newdf['kat_ipm'] = np.select(conditions,ket)

"""Rename columns"""

newdf.head()

"""## Extrapolary Data Analysis

### 1.Name of Columns
"""

newdf.columns

"""### 2. Check null values for each Column"""

newdf.isnull().sum()

"""### 3.Data type for each Column"""

newdf.dtypes

"""### 4.Statistical Insights"""

newdf.describe()

"""### 5.Line chart"""

# plot_perbandingan('BALI','DI YOGYAKARTA','Harapan Hidup (Tahun)')

"""### 6.Barplot"""

# plot_bar('Pengeluaran Per Kapita Per Tahun (Ribu Rupiah)')

# import seaborn as sns
# sns.pairplot(newdf, hue = 'Provinsi', height = 4)

"""### 7.Scatter Plot"""

# scatter_plot('Harapan Hidup (Tahun)','IPM')

"""### 8.Histogram
It can be used for visualizing the Probability density function(PDF)
"""

# #hist = sns.FacetGrid(newdf, hue='Kategori IPM', height=5)
# hist.map(sns.distplot,'IPM')
# hist.add_legend();

# newdf.columns

newdf.head()

feature = newdf[newdf.columns[1:8]]
dummies = pd.get_dummies(newdf.provinsi)
df_new = pd.concat([feature,dummies], axis='columns')
df_new.head(2)

# Build a model
X = df_new.drop(['ipm','tahun','kat_ipm'], axis='columns')
X.head(3)

y = df_new.ipm
y.head(3)

print(X.shape)
print(y.shape)

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test = train_test_split(X,y, test_size = 0.2, random_state = 42)

from sklearn.linear_model import LinearRegression
model = LinearRegression()
model.fit(X_train,y_train)
model.score(X_test,y_test)

"""<h2 style='color:blue'>Use K Fold cross validation to measure accuracy of our LinearRegression model</h2>"""

from sklearn.model_selection import ShuffleSplit
from sklearn.model_selection import cross_val_score

cv = ShuffleSplit(n_splits=5, test_size=0.2, random_state=0)

cross_val_score(LinearRegression(), X, y, cv=cv)

"""<h2 style='color:blue'>Test the model for few properties</h2>"""

newdf[(newdf['provinsi'] == 'DI YOGYAKARTA')]

newdf.columns

def predict_ipm(provinsi,harapan_hidup,ppk,ls_mean,hls):    
    loc_index = np.where(X.columns==provinsi)[0][0]
    # hh : harapan hidup
    # pb:Pengeluaran Bulanan
    # ls: Rata rata lama bersekolah
    
    x = np.zeros(len(X.columns))
    x[0] = harapan_hidup
    x[1] = ppk
    x[2] = ls_mean
    x[3] = hls
    if loc_index >= 0:
        x[loc_index] = 1

    return model.predict([x])[0]

newdf[(newdf.provinsi == 'BALI')]

predict_ipm('BALI',72.24,13820,9.06,13.40)

"""<h2 style='color:blue'>Export location and column information to a file that will be useful later on in our prediction application</h2>"""

import pickle
with open('Predicting HDI per Province.pickle','wb') as f:
  pickle.dump(model,f)

"""<h2 style='color:blue'>Export location and column information to a file that will be useful later on in our prediction application</h2>"""

import json
columns = {
    'data_columns' : [col for col in X.columns]
}
with open("columns.json","w") as f:
    f.write(json.dumps(columns))